@using WebLife.Resources
@{
    ViewBag.Title = "Home Page";

}

<h1>@Res.Name</h1>
<link href="~/Content/Site.css" rel="stylesheet" />

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<title>Conway's Game of Life</title>
<body>
    <div class="col" id="container">
        <div id="header">
            <h1>Conway's Game of Life</h1>
        </div>
        <div id="left-content">
            <h2>Game</h2>
            <p>Generation counter: <span id="counter">0</span></p>
            <div id="myCanvas">
                <canvas id="grid" class="grid" width="2400" height="3300"></canvas>
            </div>
        </div>
        <div class="row" id="right-content">
            <h2>Controls</h2>
            <a class="btn btn-default btn-sm col-md-3" id="controlLink" href="javascript:void(0)">Start/Stop</a>
            <a class="btn btn-default btn-sm col-md-3" id="clearLink" href="javascript:void(0)">Clear Grid</a>
            <label>Min:</label>
            <select class="input-sm" id="minimumSelect">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
            </select>
            <label>Max:</label>
            <select class="input-sm" id="maximumSelect">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
            </select>
            <label>Min:</label>
            <select class="input-sm" id="spawnSelect">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
            </select>
            <a class="btn btn-default btn-sm col-md-3" id="resize" href="javascript:void(0)">Resize</a>
            <br />
            <p>
            </p>
        </div>
       

    </div>
</body>


<script type="text/javascript">
    $(document).ready(
                   function () {
                       Array.matrix = function (m, n, initial) {
                           var a, i, j, mat = [];
                           for (i = 0; i < m; i += 1) {
                               a = [];
                               for (j = 0; j < n; j += 1) {
                                   a[j] = 0;
                               }
                               mat[i] = a;
                           }
                           return mat;
                       };
                       var Life = {};
                       Life.CELL_SIZE = 20;
                       Life.X = 2400;
                       Life.Y = 3300;
                       Life.WIDTH = Life.X / Life.CELL_SIZE;
                       Life.HEIGHT = Life.Y / Life.CELL_SIZE;
                       Life.DEAD = 0;
                       Life.ALIVE = 1;
                       Life.DELAY = 100;
                       Life.STOPPED = 0;
                       Life.RUNNING = 1;
                       Life.minimum = parseInt(document.getElementById("minimumSelect").value);
                       Life.maximum = parseInt(document.getElementById("maximumSelect").value);
                       Life.spawn = parseInt(document.getElementById("spawnSelect").value);
                       Life.state = Life.STOPPED;
                       Life.interval = null;
                       Life.grid = Array.matrix(Life.HEIGHT, Life.WIDTH, 0);
                       Life.counter = 0;
                       Life.updateState = function () {
                           var neighbours;
                           var nextGenerationGrid = Array.matrix(Life.HEIGHT, Life.WIDTH, 0);
                           for (var h = 0; h < Life.HEIGHT; h++) {
                               for (var w = 0; w < Life.WIDTH; w++) {
                                   neighbours = Life.calculateNeighbours(h, w);
                                   if (Life.grid[h][w] !== Life.DEAD) {
                                       if ((neighbours >= Life.minimum) && (neighbours <= Life.maximum)) {
                                           nextGenerationGrid[h][w] = Life.ALIVE;
                                       }
                                   } else {
                                       if (neighbours === Life.spawn) {
                                           nextGenerationGrid[h][w] = Life.ALIVE;
                                       }
                                   }
                               }
                           }
                           Life.copyGrid(nextGenerationGrid, Life.grid);
                           Life.counter++;
                       };
                       Life.calculateNeighbours = function (y, x) {
                           var total = (Life.grid[y][x] !== Life.DEAD) ? -1 : 0;
                           for (var h = -1; h <= 1; h++) {
                               for (var w = -1; w <= 1; w++) {
                                   if (Life.grid[(Life.HEIGHT + (y + h)) % Life.HEIGHT][(Life.WIDTH + (x + w)) % Life.WIDTH] !== Life.DEAD) {
                                       total++;
                                   }
                               }
                           }
                           return total;
                       };
                       Life.copyGrid = function (source, destination) {
                           for (var h = 0; h < Life.HEIGHT; h++) {
                               /*
                               for (var w = 0; w < Life.WIDTH; w++) {
                               destination[h][w] = source[h][w];
                               }
                               */
                               destination[h] = source[h].slice(0);
                           }
                       };
                       function Cell(row, column) {
                           this.row = row;
                           this.column = column;
                       };
                       var gridCanvas = document.getElementById('grid');
                       var counterSpan = document.getElementById("counter");
                       var controlLink = document.getElementById("controlLink");
                       var clearLink = document.getElementById("clearLink");
                       var minimumSelect = document.getElementById("minimumSelect");
                       var maximumSelect = document.getElementById("maximumSelect");
                       var spawnSelect = document.getElementById("spawnSelect");
                       var resizeLink = document.getElementById("resize");
                       controlLink.onclick = function () {
                           switch (Life.state) {
                               case Life.STOPPED:
                                   Life.interval = setInterval(function () {
                                       update();
                                   }, Life.DELAY);
                                   Life.state = Life.RUNNING;
                                   break;
                               default:
                                   clearInterval(Life.interval);
                                   Life.state = Life.STOPPED;
                           }
                       };
                       clearLink.onclick = function () {
                           Life.grid = Array.matrix(Life.HEIGHT, Life.WIDTH, 0);
                           Life.counter = 0;
                           clearInterval(Life.interval);
                           Life.state = Life.STOPPED;
                           updateAnimations();
                       }
                       minimumSelect.onchange = function () {
                           clearInterval(Life.interval);
                           Life.state = Life.STOPPED;
                           Life.minimum = parseInt(this.value);
                           updateAnimations();
                       }
                       maximumSelect.onchange = function () {
                           clearInterval(Life.interval);
                           Life.state = Life.STOPPED;
                           Life.maximum = parseInt(this.value);
                           updateAnimations();
                       }
                       spawnSelect.onchange = function () {
                           clearInterval(Life.interval);
                           Life.state = Life.STOPPED;
                           Life.spawn = parseInt(this.value);
                           updateAnimations();
                       }
                       resizeLink.onclick = function () {
                           Life.CELL_SIZE /= 2;
                           var oldWidth = Life.WIDTH;
                           var oldHeight = Life.HEIGHT;
                           var oldGrid = Array.matrix(oldHeight, oldWidth, 0);
                           Life.copyGrid(Life.grid, oldGrid);
                           Life.WIDTH = Life.X / Life.CELL_SIZE;
                           Life.HEIGHT = Life.Y / Life.CELL_SIZE;
                           Life.grid = Array.matrix(Life.HEIGHT, Life.WIDTH, 0);
                           for (var h = 0; h < oldHeight; h++) {
                               
                               for (var w = 0; w < oldWidth; w++) 
                                   Life.grid[h][w] = oldGrid[h][w];
                               }
                               
                          


                           Strokes();

                           updateAnimations();
                       }

                       function update() {
                           Life.updateState();
                           //updateInput();
                           //updateAI();
                           //updatePhysics();
                           updateAnimations();
                           //updateSound();
                           //updateVideo();
                       };
                       function updateAnimations() {
                           for (var h = 0; h < Life.HEIGHT; h++) {
                               for (var w = 0; w < Life.WIDTH; w++) {
                                   if (Life.grid[h][w] === Life.ALIVE) {
                                       context.fillStyle = "#000";
                                   } else {
                                       context.fillStyle = "#FFFFFF";
                                       //context.clearRect();
                                   }
                                   context.fillRect(
                                                                             w * Life.CELL_SIZE + 1,
                                                                             h * Life.CELL_SIZE + 1,
                                                                             Life.CELL_SIZE - 1,
                                                                             Life.CELL_SIZE - 1);
                               }
                           }
                           counterSpan.innerHTML = Life.counter;
                       };

                       function Strokes() {
                           if (gridCanvas.getContext) {
                               var context = gridCanvas.getContext('2d');
                               var offset = Life.CELL_SIZE;
                               for (var x = 0; x <= Life.X; x += Life.CELL_SIZE) {
                                   context.moveTo(0.5 + x, 0);
                                   context.lineTo(0.5 + x, Life.Y);
                               }
                               for (var y = 0; y <= Life.Y; y += Life.CELL_SIZE) {
                                   context.moveTo(0, 0.5 + y);
                                   context.lineTo(Life.X, 0.5 + y);
                               }
                               context.strokeStyle = "#254117";
                               context.stroke();


                           }
                       }
                       if (gridCanvas.getContext) {
                           var context = gridCanvas.getContext('2d');
                           var offset = Life.CELL_SIZE;
                           for (var x = 0; x <= Life.X; x += Life.CELL_SIZE) {
                               context.moveTo(0.5 + x, 0);
                               context.lineTo(0.5 + x, Life.Y);
                           }
                           for (var y = 0; y <= Life.Y; y += Life.CELL_SIZE) {
                               context.moveTo(0, 0.5 + y);
                               context.lineTo(Life.X, 0.5 + y);
                           }
                           context.strokeStyle = "#254117";
                           context.stroke();
                           function canvasOnClickHandler(event) {
                               var cell = getCursorPosition(event);
                               var state = Life.grid[cell.row][cell.column] == Life.ALIVE ? Life.DEAD : Life.ALIVE;
                               Life.grid[cell.row][cell.column] = state;
                               updateAnimations();
                           };
                           function getCursorPosition(event) {
                               var x;
                               var y;
                               if (event.pageX || event.pageY) {
                                   x = event.pageX + document.getElementById("myCanvas").scrollLeft;
                                   y = event.pageY + document.getElementById("myCanvas").scrollTop;
                               } else {
                                   x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft + document.getElementById("myCanvas").scrollLeft;
                                   y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop + document.getElementById("myCanvas").scrollTop;
                               }
                               x -= gridCanvas.offsetLeft;
                               y -= gridCanvas.offsetTop;

                               var cell = new Cell(Math.floor((y) / Life.CELL_SIZE), Math.floor((x) / Life.CELL_SIZE));
                               return cell;
                           };
                           gridCanvas.addEventListener("click", canvasOnClickHandler, false);
                       } else {
                           alert("Canvas is unsupported in your browser.");
                       }
                   }
          );



</script>
